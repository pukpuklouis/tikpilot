
---
development guide
---
## development Enviroment
- use pnpm as package manager 
- use pnpm dev to start the dev server
- use pnpm build to build the project
- use pnpm lint to lint the project
- use pnpm test to test the project
- use pnpm clean to clean the project
- use pnpm dev:backend to start the backend server
- this is a monorepo project, so you can use pnpm run <command> in any package
- this project is containerized, so you can use docker-compose up to start the project

---
description: Guidelines for writing clean, maintainable, and human-readable code. Apply these rules when writing or reviewing code to ensure consistency and quality.
globs: 
---
# Clean Code Guidelines

## Constants Over Magic Numbers
- Replace hard-coded values with named constants
- Use descriptive constant names that explain the value's purpose
- Keep constants at the top of the file or in a dedicated constants file

## Meaningful Names
- Variables, functions, and classes should reveal their purpose
- Names should explain why something exists and how it's used
- Avoid abbreviations unless they're universally understood

## Smart Comments
- Don't comment on what the code does - make the code self-documenting
- Use comments to explain why something is done a certain way
- Document APIs, complex algorithms, and non-obvious side effects

## Single Responsibility
- Each function should do exactly one thing
- Functions should be small and focused
- If a function needs a comment to explain what it does, it should be split

## DRY (Don't Repeat Yourself)
- Extract repeated code into reusable functions
- Share common logic through proper abstraction
- Maintain single sources of truth

## Clean Structure
- Keep related code together
- Organize code in a logical hierarchy
- Use consistent file and folder naming conventions

## Encapsulation
- Hide implementation details
- Expose clear interfaces
- Move nested conditionals into well-named functions

## Code Quality Maintenance
- Refactor continuously
- Fix technical debt early
- Leave code cleaner than you found it

## Testing
- Write tests before fixing bugs
- Keep tests readable and maintainable
- Test edge cases and error conditions

## Version Control
- Write clear commit messages
- Make small, focused commits
- Use meaningful branch names 

## design priciple 
- single responsibility principle
- open/closed principle
- liskov substitution principle
- interface segregation principle
- dependency inversion principle
- google clean code, google clean architecture
- google style docstring

---

Below you will find a variety of important rules spanning:
- the dev_workflow
- the .windsurfrules document self-improvement workflow
- the template to follow when modifying or adding new sections/rules to this document.

You are an expert in TypeScript, Node.js, Web APIs, Vite, Vue.js, Vue Router, Pinia, VueUse, Radix Vue, Tailwind CSS, Hono, and Drizzle ORM, with a deep understanding of best practices and performance optimization techniques in these technologies. Code Style and Structure - Write concise, maintainable, and technically accurate code with relevant examples. 
- Use functional, declarative programming patterns.
- Prefer iteration and modularization over code duplication. 
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Organize files systematically: each file should contain only related content, such as exported components, subcomponents, helpers, static content, and types.
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for functions.
- Use the "function" keyword for pure functions to benefit from hoisting and clarity.
- Prefer the Receive an Object, Return an Object (RORO) pattern for function parameters. 
- Prefer one-line syntax for simple conditional statements (e.g., if (condition) doSomething()). 
- Use TypeScript for all code. Prefer interfaces over types. Avoid enums; use maps instead for better type safety and flexibility. 
- Error Handling and Validation - Handle errors and edge cases at the beginning of functions. 
- Use early returns for error conditions to avoid deeply nested if statements. 
- Use guard clauses to handle preconditions and invalid states early.
- Avoid unnecessary else statements; use if-return pattern instead.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
- VueJS
- Use functional components with TypeScript interfaces.
- Always use the Vue Composition API script setup style.
- Leverage VueUse functions where applicable to enhance reactivity and performance.
- Prefer the "function" keyword for methods but use arrow functions with const for computed properties.
- Prefer the `defineModel` macro for creating two-way bindings.
- Use the succint syntax for defineEmits (e.g. `change: [id: number]`)
- UI and Styling
- Use Radix Vue, and Tailwind CSS for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.
- Performance Optimization
- Wrap asynchronous components in Suspense with a fallback UI.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement an optimized chunking strategy during the Vite build process, such as code splitting, to generate smaller bundle sizes.
- Key Conventions
- Optimize Web Vitals (LCP, CLS, FID) using tools like Lighthouse or WebPageTest.
  